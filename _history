{"entries":[{"timestamp":1738983251924,"editorVersion":"7.0.57","changes":[{"type":"edited","filename":"main.blocks","patch":[{"diffs":[[0,"http"],[-1,"s"],[0,"://"],[-1,"developers.google.com/blockly/xml\"><variables></variables><block type=\"pxt-on-start\" id=\"Go:K6hY)f*g^Q_4O5gQ?\" x=\"20\" y=\"20"],[1,"www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start"],[0,"\"></"]],"start1":12,"start2":12,"length1":135,"length2":62},{"diffs":[[0,"</block>"],[1,"\n  "],[0,"<block t"]],"start1":72,"start2":72,"length1":16,"length2":19},{"diffs":[[0,"ver\""],[-1," id=\"eoYdnV@Oq1o7Lzo|exBq\" x=\"225\" y=\"20\""],[0,"></b"]],"start1":107,"start2":107,"length1":49,"length2":8},{"diffs":[[0,"</block>"],[1,"\n"],[0,"</xml>"]],"start1":112,"start2":112,"length1":14,"length2":15}]},{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"// Very-Key Notes:\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Bot (Network: Server)\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// ** ~ HiTec HS-55\n// \n// ** MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * To prevent flooding this bot-server with messages, have controller-client delay approx. 20ms to still maintain real-time response after each send-tx.\n// \n// * Also, 1 Char Msg Max, 2 Char or more caused buffer-overrun and serial broke down, froze\n// \n// * on event AB not work, but A or B does work reliably\n// \n// * also 'on button A', 'on button B', and 'on button A+B' do work without 'on event' blocks present: event triggers only on ButtonEvtUp reliably\n// \n// ** Also if held down longer than 2 sec, event will be aborted\n// \n// * Thus, avoid condition: 'button A/B/A+B is pressed' block since not reliable\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * Key Notes: Controller-Joystick (Network-Client)\n// \n// * Yahboom Joystick\n// \n// ** https://www.yahboom.net/study/SGH\n// \n// ** https://github.com/lzty634158/GHBit\n// \n// * DfRobot Driver Expansion Board\n// \n// ** https://wiki.dfrobot.com/Micro_bit_Driver_Expansion_Board_SKU_DFR0548\n// \n// ** https://github.com/DFRobot/pxt-motor\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// ----- ----- ----- ----- ----- ----- ----- -----\n// \n// * 2nd level of conditions not reliable involving 'name', 'value' and 'button press'\n// \n// * Prevent Boundary Issues with Rollover/FlipMSB, Thus Force Largest-Boundaried-Tilt, etc.: Constrain Raw Tilts: -90,+90 or -60,+60\n// \n// * Disable code (pulling out of stack) is same as removing code and is effective for redeeming used disk/ram space\n// \n// * Deadzone was 20, yet do 30 for safety buffer\n// \n// * button_Debounce_TriggerDisableMsec: 'Pause appears to solve timing issue of multiple tx where gears are skipped, thus slow down tx: 100ms too fast - not help, 200ms best, 500ms better, 1s, 2s good\n// \n// * Do not allow 'on shake/freefall/any_motion_event' for Bot since collision can accidentally trigger this\n// \n// * MicroBit A/B Buttons not work well with LED Display, so use 'show string' instead\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// ** 20msec :) not bad-but some lag, 50msec :) seems just right, 100msec not bad-but some lag\n// \n// ** network_Throttle_PausePerCpuCycle_Int = 50\n// \n// ** Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// 2021-0307\n// \n// * Round does work, yet for Quadrant 2, 4, opposite polarity causes X.Y Pair not work, since will not sum correctly, thus must offset with 255 for all positive message-transfer\n// \n// * false = 0, true > 0 (non-zero)\n// \n// 2021-0308-0900\n// \n// * Seems Javascript more robust debugger:error-finder vs. Python\n// \n// * Makecode: only changes honored on the latest web-version in case duplicate window\n// \n// 2021-0311\n// \n// * Weird compass rotation is skewed moving forward and backward in a cyclical way, does distort the number. Stationary okay, but added motion not good.  Wheels don't need to move.\n// \n// 2021-0313\n// \n// * P16 and P8 are the only pins not reserved for anything else, thus free for Servo 1 &  2\n// \n// ** yet P8 hard to find, so use p15 instead\n// \n// ** https://makecode.microbit.org/device/pins\n// \n// * Seems that servos are reversed orientation.  Look from outside observer, not driver-perspective\n// \n// * Seems that  Lego Servos are 270-degrees range (vs180)\n// \n// 22-1126\n// \n// * Seems best that switch to true 'Bool' type vs 'Bool_Int' though more convenient for 'serial_prints', not good for customized api_blocks\n// \n// 22-1217\n// \n// * Delauren Total-Quad-Arm Lift: 3 x AA = 3 x 24g/AA = 75 g\n// \n// ** 100 g too much\n// \n// ** LEGO Technic Weight Block 50g\n// \n// 22-1218\n// \n// * TYJ used Medium 2KG-Torque Twin Motors can lift 200g w/o much strain, 250g with straining. Direct axle shaft best for max torque.  Avoid Dog-Gear for Max Torque.  These motors stop being strong enough to cut/break/severe/pinch off your finger.  ; )\nfunction screen_Show_Command_Func(screen_X_In: number, screen_Y_In: number) {\n    led.plotBrightness(screen_X_In, screen_Y_In, screenBrightness_Hi_DEFAULT_INT)\n    // too long: 50ms, 100ms, 500ms\n    basic.pause(20)\n    led.unplot(screen_X_In, screen_Y_In)\n    screen_Show_DiagnosticDashboard_Func()\n}\nfunction screen_Show_DiagnosticDashboard_Func() {\n    screen_Clear_Fn(4, 4)\n    doGroupChannelShow_Func()\n}\n// Key Notes\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// * Micro-Servo 9G A0090 (Sparkfun)\n// \n// * HiTec HS-55\n// \n// * MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\n// \n// 2021-0228\n// \n// * DC Motors\n// \n// ** \\ e.g. 155, 205, 255 (which is close enough to 255 during testing); delta 50\n// \n// ** 70% of 255 = 178.5 = 180 rounded-up; also (155+205)/2 = 180\n// \n// ** Stick w/ 155 (vs 180) for most significant difference vs Gear 2\n// \n// * KEY BUG: 'round' not seems to work, thus do manually\n// \n// * Button 'Release' Not Reliable, Seems Buggy\n// \n// * Use Digital-Pin as a DIP Switch for Setup\n// \n// ** Use P16 since easiest to locate (at top) for quick change\n// \n// ** For Controller-Joystick: Yahboom: Appears P16 defaults to Low when Open-Circuit\n// \n// ** Remove P16-Dependency since unreliable open-circuit value: either 0 or 1\n// \n// * Tried 10, but maybe not enough granularity, assuming have new, same-aged dc-motors.\n// \n// ** Resume back to 5 (smallest significant)\n// \n// ** Even need more, then recommend replacing hardware: new pair of dc-motors.\n// \n// 2021-0301\n// \n// * For Critical Configs, Best to send absolute value ('on radio received name value') vs relative values (on radio received 'receivedString'), for robustness vs. dropped packets\n// \n// ** This software config should be for small fine-tuning\n// \n// * Tilt (/Rotation/Accelerometer) = 't_*' (Prefix-Header For Radio Messages)\n// \n// ** WARNING: Seems like First condition ok when along, but when 2nd added, 1st is ignored. Thus 2-Level Logic Not Reliable\n// \n// ** Original Motor0to255:(255,-255) -> (510,0) Add 255 here: Keep all positive since cannot radio two negative #, subtract 255 at destination\n// \n// * Deactivate 'calibrate compass' since will force calibrate each new run of this code, which would be too much and inconvenient.  By default, calibrate occurs upon each flash, which is sufficient.\n// \n// * Test Responsiveness-RealTime via Rocking-Joystick-BackAndForth-BothExtremes\n// \n// * Both Bot and Controller appears automatically balanced at 40msec/cpu_cycle\n// \n// ** As long avoid 400 msec consuming LED-displays\n// \n// ** Thus keep at 0 msec\n// \n// * Sonar\n// \n// ** Standard/Default can be overridden by Master-Server\n// \n// ** 15, 30, 45\n// \n// 2021-0309\n// \n// * 'serial write value 'name'='value'' uses ':' vs '='\n// \n// 2021-0311\n// \n// * Calibration: Swirl Around Like Panning for Gold, Moving Marble Around on Flat-Plane\nfunction setup_Network_Fn() {\n    if (true) {\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 25\n        // Only 20 Leds Available\n        network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 1\n        radio.setGroup(network_GroupChannel_MyBotAndController_Base0_Int)\n        if (true) {\n            network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 100) % 10\n            network_GroupChannel_MyBotAndController_Digit_Tens_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 10) % 10\n            network_GroupChannel_MyBotAndController_Digit_Ones_Int = Math.idiv(network_GroupChannel_MyBotAndController_Base0_Int, 1) % 10\n        }\n        if (true) {\n            // * 3 sec  TOO SLOW? >> try 2 >> try 1 WILL CAUSE TOO MUCH NETWORK OVERHEAD\n            network_HiMessage_Frequency_SEC_INT = 1\n            quest_Note_3.quest_Show_String_For_Note_Small_Func(\n                \"IMPORTANT: Network Message will be cut off beyond Max Length\"\n            )\n            network_Message_LENGTH_MAX_INT = 18\n        }\n        if (true) {\n            // Constant Channel # for Master Server, which Receives Everyone's Score. Use 255 vs 0, since 0 could be easily not not used by normal users\n            network_GroupChannel_ScoreboardServer_BASE0_INT = 255\n        }\n    }\n}\n// * General Notes\n// \n// * 2019-0519-0340\n// \n// ** DFRobot Driver Expansion Board\n// \n// * 2019-0525-09-HAA TYJ first complete joystick XY\n// \n// * Technical Notes\n// \n// * 2019-1019\n// \n// ** Create more responsiveness, no DeadZone\n// \n// * 2020-0120: 844 SW error : GC allocation failed for requested number bytes: GC (garbage collection) error of 57 variables max,\n// \n// ** Delete 'index_y2' (tried to reuse but '844' error)\n// \n// ** Tried to reuse 'item' but probably is a system var\n// \n// ** Remove unused 'button_AandB_Countdown_CpuCycles', 'buttonA_Then_B_On'\n// \n// ** Rename used-only-once-via-set:\n// \n// *** 'dashboardDisplay_Brightness_HI' to 'servo_Pan_Degrees' :)+\n// \n// *** 'groupChannel_Digit_MIN' to 'servo_Pan_Degrees'\n// \n// *** 'groupChannel_Digit_MAX' to 'servo_Tilt_Degrees'\n// \n// \n// \n// * 2020-0120-02: Arm Servo\n// \n// ** S-bus not work (DFRobot driver), so switch to P-bus (MakeCode driver)\n// \n// ** DfRobot only has P0, P1, P2 as Read/Write from MakeCode's Menu, so reserve for Read Only.  Rest for Write Only.\n// \n// *** Ultrasonic Sensor: P0 (Read, Echo), P8 (Write, Trigger)\n// \n// *** ServoArmRight: P12 (Write-Only)\n// \n// *** PIxyCam: P13 (Write-Only) Pan Servo, P14 (Write-Only) Tilt Servo, P1 (Read) Dig In from PixyCam-P1, P2 (Read) Ana In from PIxyCam-P8, S8-Pwr, S8-Gnd\n// \n// * 2020-0224-1215\n// \n// ** Network Test w/ Gaming Server\n// \n// *** w/ Sonar: Simulated or Real\n// \n// *** w/ BotId: Random or Real\n// \n// * 2020-0305\n// \n// ** 844 Error 57,49 variable max issue: Consolidate 'index_X' 'index_Y' to 'index'\n// \n// *** Delete obsolete 'joystick_Value'\n// \n// * 2020-0328\n// \n// ** DFRobot S1 not seem to work for Arm-Right, though worked before, go back to micro:bit P16\n// \n// ** abandon usage of S1-S6 for now, not reliable, since not work before, yet TYJ P1-P16 does  :)+\n// \n// * 2020-04xx\n// \n// Micro-Servo 9G A0090 (Sparkfun)\n// \n// ~ HiTec HS-55\n// \n// MicroBit: 'servo set pulse pin Px (e.g. P8) to (us) ___'  :)+\n// \n// 0 no\n// \n// 250 0\n// \n// 500 no\n// \n// >> 750: 45\n// \n// 1000 90 - 10 = 80\n// \n// 1250 90 + 10 = 100\n// \n// >> 1500 90 + 30\n// \n// 1750 180 - 30\n// \n// 2000 170\n// \n// 2250 190\n// \n// >> 2500 225 = 180 + 30/45\n// \n// 2750 no\n// \n// 3000 no\n// \n// * Using DFRobot Servo Pins not reliable, possibly since these are 3.3.v servos (not standard 5.0v servos), thus use MicroBit 'servo write pin Pxx' blocks for reliable 0-180 degrees.\nfunction setup_BotAndController_Fn() {\n    if (true) {\n        _codeComment_AsText = \"System Constants\"\n        if (true) {\n            _system_BotAndController_Mode_As_SETUP_INT = 1\n            _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 2\n        }\n        if (true) {\n            _system_InvalidNumber_NEG_999_INT = -999\n        }\n    }\n    if (true) {\n        _codeComment_AsText = \"System Vars\"\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_SETUP_INT\n        _system_ScreenFreeze_ForOverrideMessage_Bool = false\n    }\n    if (true) {\n        _codeComment_AsText = \"Bot & Controller Setup\"\n        // Default: None, since require manual activation since all-in-one code shared between both devices\n        if (true) {\n            deviceType_Bot_Bool = true\n            deviceType_Controller_Bool = false\n        }\n        if (true) {\n            screenBrightness_Hi_DEFAULT_INT = 255\n            // lowest 1 is still visible :)+\n            screenBrightness_MI_INT = 7\n            // 127 not low enough, 15 is better, 1 too low, 7 seems good, try 8\n            screenBrightness_LO_INT = 1\n            screenBrightness_Heartbeat_Count_Int = 0\n            // * [30..-5]by0.5 >> 1 sec one-way-trip, [50..-10]by1, [50-..-25]by1, [100..-50]by2, [200..-100]by4, off too long: [250..-50]by4\n            if (true) {\n                // 255 max too high, stays bright too long; 50 not bad, try 30 for more 1sec heartbeat\n                screenBrightness_Heartbeat_Count_MAX_INT = 250\n                // 0 not low enough, try -15 for more of 50% duty on/off cycle, try -10 for less off, try -5\n                screenBrightness_HeartBeat_Count_MIN_INT = -50\n                // * 1 >> 0.5\n                screenBrightness_Heartbeat_Count_DELTA_INT = 4\n            }\n        }\n        if (true) {\n            tilt_Screen_Roll_X_Recenter_Raw_0to4_Int = 2\n            tilt_Screen_Pitch_Y_Recenter_Raw_0to4_Int = 2\n            // * Init to invalid Number Value to Force Proper Setup before Invalid Usage\n            tilt_Screen_X_0to4_Old_Int = _system_InvalidNumber_NEG_999_INT\n            // * Init to invalid Number Value to Force Proper Setup before Invalid Usage\n            tilt_Screen_Y_0to4_Old_Int = _system_InvalidNumber_NEG_999_INT\n            joystick_Tilt_Gear_Lo_ForMore_TurnControl_Dec = 0.3\n            quest_Note_2.quest_Show_String_For_Note_Small_Func(\n                \"Was 0.6, now increase to 0.9\"\n            )\n            joystick_Tilt_Gear_Hi_ForMore_StraightSpeed_Dec = 0.9\n            joystick_Tilt_Gear_Now_Dec = joystick_Tilt_Gear_Lo_ForMore_TurnControl_Dec\n        }\n        if (true) {\n            _debug_Show_Priority_Hi_Bool = true\n            // * 500ms seems good, 1000ms no improvement, so stay w/ 500ms\n            // * Seems that 3000ms seems best for min. lag issues, but not pragmatic,\n            // * so stick with 500ms as recent test shows it as sufficient, vs 400, 300, 200, 100ms.\n            _debug_Show_CpuCycleDelay_MILLISEC_INT = 500\n        }\n    }\n    if (true) {\n        quest_Dashboard.quest_Show_Oled_Cleared_Func(\n        )\n        quest_Dashboard.quest_Show_String_For_Oled_BigFont_Func(\n            \"Hi :)\",\n            0,\n            0\n        )\n    }\n    if (true) {\n        quest_Note_2.quest_Show_String_For_Note_Small_Func(\n            \"Default: Down Pos.\"\n        )\n        wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S6, 0)\n        wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S7, 45)\n    }\n}\nfunction doGroupChannelShow_Func() {\n    if (true) {\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Hundreds_Int, 0, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Tens_Int, 1, 0)\n        doGroupChannel_Show_PerDigit_Func(network_GroupChannel_MyBotAndController_Digit_Ones_Int, 3, 0)\n    }\n}\n// For these above radio-packets: Do this sub-stack for max cpu-cycles for driving motors for fastest real-time response\nfunction driveMotor_Fn() {\n    // Main 1of5: Initialize w/ Pitch on Both Motors L & R - along w/ 'motor_Power_Slower*' adjustments\n    if (true) {\n        joystick_Tilt_X_Neg100toPos100_Int = (joystick_Raw_X_0to200_Int - 100) * joystick_Tilt_Gear_Now_Dec\n        joystick_Tilt_Y_Neg100toPos100_Int = (joystick_Raw_Y_0to200_Int - 100) * joystick_Tilt_Gear_Now_Dec\n    }\n    // Main 2of5: Complement w/ Roll on Both Motors L & R\n    if (true) {\n        motor_Power_L_Neg100toPos100_Int = joystick_Tilt_Y_Neg100toPos100_Int\n        motor_Power_R_Neg100toPos100_Int = joystick_Tilt_Y_Neg100toPos100_Int\n    }\n    // Main 3of5: Activate Motors\n    if (true) {\n        motor_Power_L_Neg100toPos100_Int = Math.constrain(motor_Power_L_Neg100toPos100_Int + 1 * joystick_Tilt_X_Neg100toPos100_Int, -100, 100)\n        motor_Power_R_Neg100toPos100_Int = Math.constrain(motor_Power_R_Neg100toPos100_Int + -1 * joystick_Tilt_X_Neg100toPos100_Int, -100, 100)\n        // /jwc o roboQuest.quest_PowerMotorsViaBlueRedBlackPins_Fn(quest_PortGroup_BlueRedBlack_PortIds_Enum.S1_MotorLeft__S0_MotorRight, motor_Power_L_Neg100toPos100_Int, motor_Power_R_Neg100toPos100_Int)\n        quest_Motors.quest_Set_PowerMotorsViaBlueRedBlackPins_Func(\n            quest_PortGroup_BlueRedBlack_PortIds_Enum.S1_MotorLeft__S0_MotorRight,\n            motor_Power_L_Neg100toPos100_Int,\n            motor_Power_R_Neg100toPos100_Int\n        )\n    }\n    // Main 4of5: Screen LED\n    if (_system_ScreenFreeze_ForOverrideMessage_Bool == false) {\n        // * Condition required to prevent wiping-out (0,0) by default\n        if (tilt_Screen_X_0to4_Old_Int != _system_InvalidNumber_NEG_999_INT && tilt_Screen_Y_0to4_Old_Int != _system_InvalidNumber_NEG_999_INT) {\n            // * Restore original 'brightness' to preserve original value (e.g. 'Group_Channel_#')\n            led.plotBrightness(tilt_Screen_X_0to4_Old_Int, tilt_Screen_Y_0to4_Old_Int, tilt_Screen_XY_0to4_Brightness_Old_Int)\n        }\n        if (true) {\n            // * Reverse orientation since 'micro:bit' upside-down\n            tilt_Screen_X_0to4_Int = Math.round(Math.map(joystick_Raw_X_0to200_Int, 0, 200, 4, 0))\n            // * Reverse orientation since 'micro:bit' upside-down\n            tilt_Screen_Y_0to4_Int = Math.round(Math.map(joystick_Raw_Y_0to200_Int, 0, 200, 0, 4))\n        }\n        if (true) {\n            tilt_Screen_XY_0to4_Brightness_Old_Int = led.pointBrightness(tilt_Screen_X_0to4_Int, tilt_Screen_Y_0to4_Int)\n        }\n        if (true) {\n            led.plotBrightness(tilt_Screen_X_0to4_Int, tilt_Screen_Y_0to4_Int, Math.max(screenBrightness_Heartbeat_Count_Int, tilt_Screen_XY_0to4_Brightness_Old_Int))\n            tilt_Screen_X_0to4_Old_Int = tilt_Screen_X_0to4_Int\n            tilt_Screen_Y_0to4_Old_Int = tilt_Screen_Y_0to4_Int\n        }\n    }\n}\ninput.onButtonPressed(Button.AB, function () {\n    control.reset()\n})\n// To Insure Both at Synchronized States, Both Bot and Controller Must Start/Re-Start at 'setup_and_startup' State (e.g. for Manual Config Overrides, Debug-Serial-Prints, etc. to work)\n// * Important News\n// ** 'receivedstring': 18 char max\n// ** 'name': 8 char max for this project\nradio.onReceivedString(function (receivedString) {\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT) {\n        if (receivedString == \"HiFrom_C\") {\n            if (led.point(4, 0)) {\n                led.unplot(4, 0)\n            } else {\n                // * Higher brightness vs. 'Group_Channel_#', Highest Value since Network_Status is Very Important\n                led.plotBrightness(4, 0, screenBrightness_Hi_DEFAULT_INT)\n            }\n        }\n    }\n})\n// * Motion Control: Part 2of2: Bot\n// \n// Seems 'name' is 8 char max, though 'on radio received ''receiveString''' does not seem to have such limitation\n// \n// * Important News\n// ** 'receivedstring': 18 char max\n// ** 'name': 8 char max for this project\n// \n// so any Messages Sent to Controller-Joystick will be dropped/ignored\nradio.onReceivedValue(function (name, value) {\n    // Criteria 1of1: Hardware=Based\n    if (deviceType_Bot_Bool && !(deviceType_Controller_Bool) && _system_BotAndController_Mode_Int != _system_BotAndController_Mode_As_SETUP_INT) {\n        if (name == \"tilt_xy\") {\n            joystick_Raw_X_0to200_Int = Math.trunc(value)\n            joystick_Raw_Y_0to200_Int = Math.round((value - Math.trunc(value)) * 1000)\n            driveMotor_Fn()\n        } else if (name == \"gear_lo\") {\n            joystick_Tilt_Gear_Now_Dec = joystick_Tilt_Gear_Lo_ForMore_TurnControl_Dec\n            screen_Show_Command_Func(3, 2)\n        } else if (name == \"gear_hi\") {\n            joystick_Tilt_Gear_Now_Dec = joystick_Tilt_Gear_Hi_ForMore_StraightSpeed_Dec\n            screen_Show_Command_Func(1, 2)\n        } else if (name == \"serv_dwn\") {\n            wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S6, 0)\n            wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S7, 45)\n        } else if (name == \"serv_up\") {\n            quest_Note_2.quest_Show_String_For_Note_Small_Func(\n                \"Delta: 45deg between Up & Down\"\n            )\n            wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S6, 45)\n            wuKong.setServoAngle(wuKong.ServoTypeList._180, wuKong.ServoList.S7, 0)\n        } else {\n            basic.showString(\"!!! ERROR: 23-0519-1320: \" + name)\n        }\n    }\n})\nfunction screen_ScrollText_Fn(text_Str_In: string) {\n    // Fragment the substrings to be interruptible between each 'show string' block\n    _tmp_Str = text_Str_In.split(\",\")\n    for (let value of _tmp_Str) {\n        basic.showString(\"\" + (value))\n        if (_system_BotAndController_Mode_Int != _system_BotAndController_Mode_As_SETUP_INT) {\n            break;\n        }\n    }\n}\nfunction screen_Clear_Fn(row_X_Max_In: number, col_Y_Max_In: number) {\n    for (let index_X = 0; index_X <= row_X_Max_In; index_X++) {\n        for (let index_Y = 0; index_Y <= col_Y_Max_In; index_Y++) {\n            led.unplot(index_X, index_Y)\n        }\n    }\n}\nfunction doGroupChannel_Show_PerDigit_Func(singleDigit_In: number, OffsetX_In: number, OffsetY_In: number) {\n    for (let index2 = 0; index2 <= singleDigit_In - 1; index2++) {\n        led.plotBrightness(4 - (Math.idiv(index2, 5) + OffsetX_In), 4 - (index2 % 5 + OffsetY_In), screenBrightness_MI_INT)\n    }\n}\nlet _system_BotAndControllelr_Mode_As_SETUP_TO_MAIN_INT = 0\nlet network_Message_Str = \"\"\nlet sensor_Magnetometer_Force_Raw_Int = 0\nlet sensor_LightLevel_Raw_Int = 0\nlet _tmp_Str: string[] = []\nlet tilt_Screen_Y_0to4_Int = 0\nlet tilt_Screen_X_0to4_Int = 0\nlet tilt_Screen_XY_0to4_Brightness_Old_Int = 0\nlet motor_Power_R_Neg100toPos100_Int = 0\nlet motor_Power_L_Neg100toPos100_Int = 0\nlet joystick_Raw_Y_0to200_Int = 0\nlet joystick_Tilt_Y_Neg100toPos100_Int = 0\nlet joystick_Raw_X_0to200_Int = 0\nlet joystick_Tilt_X_Neg100toPos100_Int = 0\nlet _debug_Show_CpuCycleDelay_MILLISEC_INT = 0\nlet _debug_Show_Priority_Hi_Bool = false\nlet joystick_Tilt_Gear_Now_Dec = 0\nlet joystick_Tilt_Gear_Hi_ForMore_StraightSpeed_Dec = 0\nlet joystick_Tilt_Gear_Lo_ForMore_TurnControl_Dec = 0\nlet tilt_Screen_Y_0to4_Old_Int = 0\nlet tilt_Screen_X_0to4_Old_Int = 0\nlet tilt_Screen_Pitch_Y_Recenter_Raw_0to4_Int = 0\nlet tilt_Screen_Roll_X_Recenter_Raw_0to4_Int = 0\nlet screenBrightness_Heartbeat_Count_DELTA_INT = 0\nlet screenBrightness_HeartBeat_Count_MIN_INT = 0\nlet screenBrightness_Heartbeat_Count_MAX_INT = 0\nlet screenBrightness_Heartbeat_Count_Int = 0\nlet screenBrightness_LO_INT = 0\nlet screenBrightness_MI_INT = 0\nlet deviceType_Controller_Bool = false\nlet deviceType_Bot_Bool = false\nlet _system_ScreenFreeze_ForOverrideMessage_Bool = false\nlet _system_BotAndController_Mode_Int = 0\nlet _system_InvalidNumber_NEG_999_INT = 0\nlet _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT = 0\nlet _system_BotAndController_Mode_As_SETUP_INT = 0\nlet network_GroupChannel_ScoreboardServer_BASE0_INT = 0\nlet network_Message_LENGTH_MAX_INT = 0\nlet network_HiMessage_Frequency_SEC_INT = 0\nlet network_GroupChannel_MyBotAndController_Digit_Ones_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Tens_Int = 0\nlet network_GroupChannel_MyBotAndController_Digit_Hundreds_Int = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MIN_INT = 0\nlet network_GroupChannel_MyBotAndController_BASE0_MAX_INT = 0\nlet screenBrightness_Hi_DEFAULT_INT = 0\nlet network_GroupChannel_MyBotAndController_Base0_Int = 0\nlet _codeComment_AsText = \"\"\n// * Ok icon to look upside_down when micro:bit upside_down\nif (true) {\n    _codeComment_AsText = \"'B' = 'B'ot\"\n    basic.showLeds(`\n        # # # # .\n        # . . . #\n        # # # # #\n        # . . . #\n        # # # # .\n        `)\n    // * 3, 2, 1.5sec, 2 (to not confuse with default group_channel = 1\n    // /jwc o roboQuest.quest_ContinueCurrentState_CountdownTimer_Set_Fn(2, quest_Time_Units_Enum.Seconds)\n    quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(2, quest_Time_Units_Enum.Seconds)\n}\nif (true) {\n    _codeComment_AsText = \"Set Group_Channel_# for Both Bot & Controller_Joystick\"\n    // * Good Stress Test: 199 (to test all dots for 10's, 1's; 255 (to test all dots for 100's: 1,2)\n    network_GroupChannel_MyBotAndController_Base0_Int = 1\n}\nif (true) {\n    setup_BotAndController_Fn()\n    setup_Network_Fn()\n}\nloops.everyInterval(2000, function () {\n    if (true) {\n        quest_Note_2.quest_Show_String_For_Note_Small_Func(\n            \"Range: 0 - 255\"\n        )\n        sensor_LightLevel_Raw_Int = input.lightLevel()\n        if (sensor_LightLevel_Raw_Int <= 85) {\n            led.plotBrightness(0, 0, 0)\n        } else if (sensor_LightLevel_Raw_Int <= 170) {\n            led.plotBrightness(0, 0, screenBrightness_MI_INT)\n        } else if (sensor_LightLevel_Raw_Int <= 255) {\n            led.plotBrightness(0, 0, screenBrightness_Hi_DEFAULT_INT)\n        }\n    }\n    if (true) {\n        quest_Note_2.quest_Show_String_For_Note_Small_Func(\n            \"Range: 0 - 2000+\"\n        )\n        sensor_Magnetometer_Force_Raw_Int = Math.round(input.magneticForce(Dimension.Strength))\n        if (sensor_Magnetometer_Force_Raw_Int <= 100) {\n            led.plotBrightness(2, 0, 0)\n        } else if (sensor_Magnetometer_Force_Raw_Int <= 500) {\n            led.plotBrightness(2, 0, screenBrightness_LO_INT)\n        } else if (sensor_Magnetometer_Force_Raw_Int <= 1000) {\n            led.plotBrightness(2, 0, screenBrightness_MI_INT)\n        } else {\n            led.plotBrightness(2, 0, screenBrightness_Hi_DEFAULT_INT)\n        }\n    }\n    if (true) {\n        quest_Note_3.quest_Show_String_For_Note_Small_Func(\n            \"Not end w/'delimiter' or will create a fake key_value pair at receiving end\"\n        )\n        // network_Message_Str = \"\" + convertToText(network_GroupChannel_MyBotAndController_Base0_Int) + \":\" + convertToText(input.lightLevel()) + \":\" + convertToText(input.temperature()) + \":\" + convertToText(0)\n        // network_Message_Str = \"ID:\" + convertToText(botGroupChannelNum_Int) + \", TE:\" + convertToText(input.temperature()) + \", LI:\" + convertToText(input.lightLevel()) + \", CO:\" + convertToText(input.compassHeading()) + \", MX:\" + convertToText(input.magneticForce(Dimension.X)) + \", MY:\" + convertToText(input.magneticForce(Dimension.Y)) + \", MZ:\" + convertToText(input.magneticForce(Dimension.Z)) + \", MT:\" + convertToText(input.magneticForce(Dimension.Strength))\n        network_Message_Str = \"#:\" + convertToText(network_GroupChannel_MyBotAndController_Base0_Int) + \",L:\" + convertToText(sensor_LightLevel_Raw_Int) + \",M:\" + convertToText(sensor_Magnetometer_Force_Raw_Int)\n        quest_Note_3.quest_Show_String_For_Note_Big_Func(\n            \"Network_Message Max Length or will be cut off\"\n        )\n        if (network_Message_Str.length > network_Message_LENGTH_MAX_INT) {\n            basic.showString(\"ERROR: Network Message > Max Len.\")\n        }\n        radio.setGroup(network_GroupChannel_ScoreboardServer_BASE0_INT)\n        radio.sendString(network_Message_Str)\n        radio.setGroup(network_GroupChannel_MyBotAndController_Base0_Int)\n        if (_debug_Show_Priority_Hi_Bool) {\n            serial.writeLine(\"> \" + network_Message_Str)\n        }\n    }\n})\nbasic.forever(function () {\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT) {\n        radio.sendString(\"HiFrom_B\")\n        // /jwc o roboQuest.quest_ContinueCurrentState_CountdownTimer_Set_Fn(network_HiMessage_Frequency_SEC_INT, quest_Time_Units_Enum.Seconds)\n        quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(network_HiMessage_Frequency_SEC_INT, quest_Time_Units_Enum.Seconds)\n    }\n})\nbasic.forever(function () {\n    screenBrightness_Heartbeat_Count_Int += screenBrightness_Heartbeat_Count_DELTA_INT\n    // * Use '<= and >=' vs '< and >' since do not want to go past boundaries when changing values\n    if (screenBrightness_Heartbeat_Count_Int <= screenBrightness_HeartBeat_Count_MIN_INT || screenBrightness_Heartbeat_Count_Int >= screenBrightness_Heartbeat_Count_MAX_INT) {\n        screenBrightness_Heartbeat_Count_DELTA_INT = -1 * screenBrightness_Heartbeat_Count_DELTA_INT\n    }\n})\nbasic.forever(function () {\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_SETUP_INT) {\n        screen_ScrollText_Fn(\"P,u,s,h,A,o,r,B,.\")\n        basic.showLeds(`\n            # # # . .\n            # . . # .\n            # # # # .\n            # . . # .\n            # # # . .\n            `)\n        // * Broken/Fragmented via this repeat loop to allow for the pause to be 'real-time' interruptible.\n        // \n        // * 3, 2, 1.5sec\n        for (let index = 0; index < 3; index++) {\n            if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_SETUP_INT) {\n                // /jwc o roboQuest.quest_ContinueCurrentState_CountdownTimer_Set_Fn(0.5, quest_Time_Units_Enum.Seconds)\n                quest_Timer.quest_Set_ContinueCurrentState_CountdownTimer_Func(0.5, quest_Time_Units_Enum.Seconds)\n            }\n        }\n    } else if (_system_BotAndController_Mode_Int == _system_BotAndControllelr_Mode_As_SETUP_TO_MAIN_INT) {\n        screen_Show_DiagnosticDashboard_Func()\n        _system_BotAndController_Mode_Int = _system_BotAndController_Mode_As_COMMAND_AS_MAIN_MODE_INT\n    }\n})\nbasic.forever(function () {\n    // Setup_Startup: Part 1of1: Setup Software Initializaion\n    // * Only 1of1 place that activates Bot\n    if (_system_BotAndController_Mode_Int == _system_BotAndController_Mode_As_SETUP_INT) {\n        if (input.buttonIsPressed(Button.A) || input.buttonIsPressed(Button.B)) {\n            _system_BotAndController_Mode_Int = _system_BotAndControllelr_Mode_As_SETUP_TO_MAIN_INT\n        }\n    }\n})"],[1,"\n"]],"start1":0,"start2":0,"length1":30858,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0," \"*\""],[-1,",\n        \"23-1006-1820-RQ100-QuestCustomBlocks-Wukong-Oled\": \"github:jasonc1025-333/23-1006-1820-rq100-questcustomblocks-wukong-oled#v0.11.3\""],[0,"\n"],[1,""],[0,"    "]],"start1":171,"start2":171,"length1":151,"length2":9},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":268,"start2":268,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1738983251923,"editorVersion":"7.0.57","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"25-0207-1900-rq100-bot-advanced-23-0613-1420\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1738983605482}